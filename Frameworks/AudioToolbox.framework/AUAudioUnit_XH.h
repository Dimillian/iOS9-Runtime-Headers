/* Generated by RuntimeBrowser
   Image: /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 */

@interface AUAudioUnit_XH : AUAudioUnit {
    AUParameterTree * _cachedParameterTree;
    BOOL  _canProcess;
    BOOL  _canRender;
    struct OpaqueAudioComponentInstance { } * _componentInstance;
    struct unique_ptr<AUProcAndUserData, std::__1::default_delete<AUProcAndUserData> > { 
        struct __compressed_pair<AUProcAndUserData *, std::__1::default_delete<AUProcAndUserData> > { 
            struct AUProcAndUserData {} *__first_; 
        } __ptr_; 
    }  _elementCountListenerToken;
    NSExtension * _extension;
    BOOL  _initialized;
    AUAudioUnitBusArray_XH * _inputBusses;
    AUAudioUnitBusArray_XH * _outputBusses;
    NSObject<OS_dispatch_queue> * _propListenerQueue;
    struct vector<AUAudioUnit_XH_PropListener, std::__1::allocator<AUAudioUnit_XH_PropListener> > { 
        struct AUAudioUnit_XH_PropListener {} *__begin_; 
        struct AUAudioUnit_XH_PropListener {} *__end_; 
        struct __compressed_pair<AUAudioUnit_XH_PropListener *, std::__1::allocator<AUAudioUnit_XH_PropListener> > { 
            struct AUAudioUnit_XH_PropListener {} *__first_; 
        } __end_cap_; 
    }  _propListeners;
    <AUAudioUnitXPCProtocol> * _remote;
    int  _remotePID;
    struct IPCAURenderingClient { 
        int (**_vptr$IPCAURenderingClient)(); 
        struct CallbackReceiver { 
            int (**_vptr$CAPrint)(); 
            unsigned int mSerialNum; 
            int mObjRefCount; 
            struct IPCAURenderingClient {} *mParent; 
        } mCallbackReceiver; 
        bool mInitialized; 
        bool mRenderCallbacksTouched; 
        bool mRenderPrioritySet; 
        struct _opaque_pthread_t {} *mRenderThreadID; 
        unsigned int mHostIOPort; 
        unsigned int mRemoteAURef; 
        struct IPCAUSharedMemory { 
            int (**_vptr$SharableMemoryBase)(); 
            bool mIsOwner; 
            bool mWasMapped; 
            unsigned int mSize; 
            void *mBuffer; 
            unsigned int mPort; 
            int mFileDesc; 
            int mSerial; 
            NSObject<OS_xpc_object> *mXPCObject; 
            unsigned int mHeaderSize; 
            struct vector<IPCAUSharedMemoryBase::Element, std::__1::allocator<IPCAUSharedMemoryBase::Element> > { 
                struct Element {} *__begin_; 
                struct Element {} *__end_; 
                struct __compressed_pair<IPCAUSharedMemoryBase::Element *, std::__1::allocator<IPCAUSharedMemoryBase::Element> > { 
                    struct Element {} *__first_; 
                } __end_cap_; 
            } mElements; 
            unsigned int mMaxFrames; 
            bool mInitializing; 
        } mSharedBuffers; 
        struct XMachReceivePort { 
            unsigned int mMachPort; 
        } mRenderCallbackPort; 
        struct CAMutex { 
            int (**_vptr$CAMutex)(); 
            char *mName; 
            struct _opaque_pthread_t {} *mOwner; 
            struct _opaque_pthread_mutex_t { 
                long __sig; 
                BOOL __opaque[40]; 
            } mMutex; 
        } mMessageBufferLock; 
        struct CAMutex { 
            int (**_vptr$CAMutex)(); 
            char *mName; 
            struct _opaque_pthread_t {} *mOwner; 
            struct _opaque_pthread_mutex_t { 
                long __sig; 
                BOOL __opaque[40]; 
            } mMutex; 
        } mConnectionLock; 
        struct HostCallbackInfo { 
            void *hostUserData; 
            int (*beatAndTempoProc)(); 
            int (*musicalTimeLocationProc)(); 
            int (*transportStateProc)(); 
            int (*transportStateProc2)(); 
        } mHostCallbackInfo; 
        id /* block */ mMusicalContextBlock; 
        id /* block */ mTransportStateBlock; 
        id /* block */ mPullInputBlock; 
        bool mRenderCompleted; 
        int mRenderResult; 
        int mNumInputs; 
        int mNumOutputs; 
        unsigned int mMaximumFramesToProcess; 
        double mLastRenderSampleTime; 
    }  _renderClient;
    NSUUID * _requestIdentifier;
    struct unique_ptr<AUSyncCaller, std::__1::default_delete<AUSyncCaller> > { 
        struct __compressed_pair<AUSyncCaller *, std::__1::default_delete<AUSyncCaller> > { 
            struct AUSyncCaller {} *__first_; 
        } __ptr_; 
    }  _syncCaller;
    NSObject<OS_dispatch_queue> * _viewControllerRequestQueue;
}

@property (nonatomic, readonly) <AUAudioUnitXPCProtocol> *remote;

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)instantiateWithExtension:(id)arg1 componentDescription:(struct AudioComponentDescription { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })arg2 instance:(struct OpaqueAudioComponentInstance { }*)arg3 options:(unsigned long)arg4 completionHandler:(id /* block */)arg5;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_getBus:(unsigned long)arg1 scope:(unsigned long)arg2 error:(id*)arg3;
- (id)_getValueForKey:(id)arg1;
- (id)_getValueForProperty:(id)arg1;
- (void)_refreshBusses:(unsigned long)arg1;
- (BOOL)_setBusCount:(unsigned int)arg1 scope:(unsigned long)arg2 error:(id*)arg3;
- (void)_setValue:(id)arg1 forKey:(id)arg2;
- (void)_setValue:(id)arg1 forProperty:(id)arg2;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned int)arg3 context:(void*)arg4;
- (void*)addRemoteParameterObserver:(BOOL)arg1;
- (BOOL)allocateRenderResourcesAndReturnError:(id*)arg1;
- (void)dealloc;
- (void)deallocateRenderResources;
- (void)doOpen:(id)arg1 completion:(id /* block */)arg2;
- (id)inputBusses;
- (void)internalInitWithExtension:(id)arg1 componentDescription:(struct AudioComponentDescription { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })arg2 instance:(struct OpaqueAudioComponentInstance { }*)arg3 completion:(id /* block */)arg4;
- (id /* block */)internalRenderBlock;
- (id)outputBusses;
- (id)parameterTree;
- (void)propertiesChanged:(id)arg1;
- (id)remote;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2 context:(void*)arg3;
- (void)removeRemoteParameterObserver:(void*)arg1;
- (void)requestViewControllerWithCompletionHandler:(id /* block */)arg1;
- (void)reset;

@end
