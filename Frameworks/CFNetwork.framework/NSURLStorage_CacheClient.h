/* Generated by RuntimeBrowser
   Image: /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CFNetwork.framework/CFNetwork
 */

@interface NSURLStorage_CacheClient : NSObject <NSURLStorageCacheClient> {
    struct __CFURLCache { int (**x1)(); id x2; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x3; id x4; bool x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; unsigned int x14; struct __CFString {} *x15; struct __CFString {} *x16; struct __CFString {} *x17; char *x18; bool x19; struct CoreLockable {} *x20; struct CoreLockable {} *x21; struct CoreLockable {} *x22; struct unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > > { struct __hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> > { float x_4_3_1; } x_1_2_4; } x_23_1_1; } x23; struct deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> > { struct __split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_1_2_1; struct __CFURLCacheNode {} ***x_1_2_2; struct __CFURLCacheNode {} ***x_1_2_3; struct __compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_4_3_1; } x_1_2_4; } x_24_1_1; unsigned int x_24_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> > { unsigned long x_3_2_1; } x_24_1_3; } x24; struct _opaque_pthread_mutex_t { long x_25_1_1; BOOL x_25_1_2[40]; } x25; struct _opaque_pthread_mutex_t { long x_26_1_1; BOOL x_26_1_2[40]; } x26; struct __CFArray {} *x27; struct __CFArray {} *x28; id x29; struct _CFURLCache {} x30; bool x31; bool x32; bool x33; int x34; id x35; struct __CFSet {} x36; struct __CFArray {} *x37; id x38; struct _opaque_pthread_mutex_t { long x_39_1_1; BOOL x_39_1_2[40]; } x39; struct _opaque_pthread_mutex_t { long x_40_1_1; BOOL x_40_1_2[40]; } x40; struct __CFDictionary {} *x41; bool x42; struct bitset<32768> { unsigned long x_43_1_1[1024]; } x43; struct _opaque_pthread_mutex_t { long x_44_1_1; BOOL x_44_1_2[40]; } x44; bool x45; char *x46; id x47; struct __CFDictionary {} x48; struct _opaque_pthread_mutex_t { long x_49_1_1; BOOL x_49_1_2[40]; } x49; } * _cfCache;
    NSXPCInterface * _netStoreInterface;
    NSXPCConnection * _networkStorageConnection;
    BOOL  _networkStorageConnectionInterrupted;
    NSString * _path;
    NSData * _sandboxExtensionToken;
    int  _storageSize;
    NSString * _taskManagerIdentifier;
}

@property BOOL networkStorageConnectionInterrupted;

- (void)_associateCFURLCacheInstance:(struct __CFURLCache { int (**x1)(); id x2; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x3; id x4; bool x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; unsigned int x14; struct __CFString {} *x15; struct __CFString {} *x16; struct __CFString {} *x17; char *x18; bool x19; struct CoreLockable {} *x20; struct CoreLockable {} *x21; struct CoreLockable {} *x22; struct unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > > { struct __hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> > { float x_4_3_1; } x_1_2_4; } x_23_1_1; } x23; struct deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> > { struct __split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_1_2_1; struct __CFURLCacheNode {} ***x_1_2_2; struct __CFURLCacheNode {} ***x_1_2_3; struct __compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_4_3_1; } x_1_2_4; } x_24_1_1; unsigned int x_24_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> > { unsigned long x_3_2_1; } x_24_1_3; } x24; struct _opaque_pthread_mutex_t { long x_25_1_1; BOOL x_25_1_2[40]; } x25; struct _opaque_pthread_mutex_t { long x_26_1_1; BOOL x_26_1_2[40]; } x26; struct __CFArray {} *x27; struct __CFArray {} *x28; id x29; struct _CFURLCache {} x30; bool x31; bool x32; bool x33; int x34; id x35; struct __CFSet {} x36; struct __CFArray {} *x37; id x38; struct _opaque_pthread_mutex_t { long x_39_1_1; BOOL x_39_1_2[40]; } x39; struct _opaque_pthread_mutex_t { long x_40_1_1; BOOL x_40_1_2[40]; } x40; struct __CFDictionary {} *x41; bool x42; struct bitset<32768> { unsigned long x_43_1_1[1024]; } x43; struct _opaque_pthread_mutex_t { long x_44_1_1; BOOL x_44_1_2[40]; } x44; bool x45; char *x46; id x47; struct __CFDictionary {} x48; struct _opaque_pthread_mutex_t { long x_49_1_1; BOOL x_49_1_2[40]; } x49; }*)arg1;
- (void)_disassociateCFURLCacheInstance;
- (void)_reconnectWithStorageServer;
- (void)addCachedResponse:(id)arg1 key:(id)arg2;
- (void)addCachedResponseWithDictionary:(id)arg1 key:(id)arg2;
- (void)cachedResponseDictionaryForKey:(id)arg1 handler:(id /* block */)arg2;
- (void)copyAllPartitionNamesWithCompletionHandler:(id /* block */)arg1;
- (void)copyHostNamesForOptionalPartition:(id)arg1 handler:(id /* block */)arg2;
- (BOOL)createStorageTaskManagerForPath:(id)arg1 maxSize:(int)arg2 extension:(id)arg3 withIdentifier:(id)arg4;
- (int)currentDiskUsage;
- (void)dealloc;
- (void)deleteAllHostNames:(id)arg1 forOptionalPartition:(id)arg2;
- (void)deleteAllResponses;
- (void)deleteResponseForRequestWithKey:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)deleteResponsesSinceDate:(id)arg1;
- (BOOL)ensureNetworkStorageDaemonConnection;
- (id)getPath;
- (id)initWithCache:(struct __CFURLCache { int (**x1)(); id x2; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x3; id x4; bool x5; int x6; int x7; int x8; int x9; int x10; int x11; int x12; int x13; unsigned int x14; struct __CFString {} *x15; struct __CFString {} *x16; struct __CFString {} *x17; char *x18; bool x19; struct CoreLockable {} *x20; struct CoreLockable {} *x21; struct CoreLockable {} *x22; struct unordered_map<int, __CFURLCacheNode *, __CFURLCache__::HashFunc, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __CFURLCacheNode *> > > { struct __hash_table<std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __CFURLCacheNode *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<int, __CFURLCacheNode *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, __CFURLCache__::HashFunc, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __CFURLCacheNode *>, std::__1::equal_to<int>, true> > { float x_4_3_1; } x_1_2_4; } x_23_1_1; } x23; struct deque<__CFURLCacheNode *, std::__1::allocator<__CFURLCacheNode *> > { struct __split_buffer<__CFURLCacheNode **, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_1_2_1; struct __CFURLCacheNode {} ***x_1_2_2; struct __CFURLCacheNode {} ***x_1_2_3; struct __compressed_pair<__CFURLCacheNode ***, std::__1::allocator<__CFURLCacheNode **> > { struct __CFURLCacheNode {} ***x_4_3_1; } x_1_2_4; } x_24_1_1; unsigned int x_24_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<__CFURLCacheNode *> > { unsigned long x_3_2_1; } x_24_1_3; } x24; struct _opaque_pthread_mutex_t { long x_25_1_1; BOOL x_25_1_2[40]; } x25; struct _opaque_pthread_mutex_t { long x_26_1_1; BOOL x_26_1_2[40]; } x26; struct __CFArray {} *x27; struct __CFArray {} *x28; id x29; struct _CFURLCache {} x30; bool x31; bool x32; bool x33; int x34; id x35; struct __CFSet {} x36; struct __CFArray {} *x37; id x38; struct _opaque_pthread_mutex_t { long x_39_1_1; BOOL x_39_1_2[40]; } x39; struct _opaque_pthread_mutex_t { long x_40_1_1; BOOL x_40_1_2[40]; } x40; struct __CFDictionary {} *x41; bool x42; struct bitset<32768> { unsigned long x_43_1_1[1024]; } x43; struct _opaque_pthread_mutex_t { long x_44_1_1; BOOL x_44_1_2[40]; } x44; bool x45; char *x46; id x47; struct __CFDictionary {} x48; struct _opaque_pthread_mutex_t { long x_49_1_1; BOOL x_49_1_2[40]; } x49; }*)arg1;
- (BOOL)networkStorageConnectionInterrupted;
- (void)notifyCacheClientOfTimeRelativeResponses:(id)arg1;
- (void)notifyCachedURLResponseBecameFileBacked:(id)arg1 filePath:(id)arg2 forUUID:(id)arg3;
- (void)setMaxSize:(int)arg1;
- (void)setMinSizeForVMCachedResource:(int)arg1;
- (void)setNetworkStorageConnectionInterrupted:(BOOL)arg1;

@end
