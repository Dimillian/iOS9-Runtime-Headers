/* Generated by RuntimeBrowser
   Image: /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CoreImage.framework/CoreImage
 */

@interface CIContext : NSObject {
    void * _priv;
}

+ (int)_crashed_because_nonaddressable_memory_was_passed_to_render:(id)arg1 toBitmap:(void*)arg2 rowBytes:(int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 format:(int)arg5 colorSpace:(struct CGColorSpace { }*)arg6;
+ (id)_singletonContext;
+ (id)context;
+ (id)contextWithCGContext:(struct CGContext { }*)arg1 options:(id)arg2;
+ (id)contextWithEAGLContext:(id)arg1;
+ (id)contextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (id)contextWithMTLDevice:(id)arg1;
+ (id)contextWithMTLDevice:(id)arg1 options:(id)arg2;
+ (id)contextWithOptions:(id)arg1;
+ (struct CGColorSpace { }*)defaultGrayColorSpace;
+ (struct CGColorSpace { }*)defaultRGBColorSpace;
+ (struct CGColorSpace { }*)defaultWorkingColorSpace;

- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })CTM;
- (void)_insertEventMarker:(const char *)arg1;
- (bool)_isCGBackedContext;
- (bool)_isEAGLBackedContext;
- (struct CGColorSpace { }*)_outputColorSpace;
- (struct CGColorSpace { }*)_workingSpace;
- (void)abort;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (void)clearCaches;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (struct CGLayer { }*)createCGLayerWithSize:(struct CGSize { float x1; float x2; })arg1 info:(struct __CFDictionary { }*)arg2;
- (id)createColorCubeDataForFilters:(id)arg1 dimension:(int)arg2;
- (void)dealloc;
- (void)drawImage:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)drawImage:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (id)flatten:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (id)init;
- (id)initWithCGContext:(struct CGContext { }*)arg1 options:(id)arg2;
- (id)initWithEAGLContext:(id)arg1;
- (id)initWithEAGLContext:(id)arg1 options:(id)arg2;
- (id)initWithMTLDevice:(id)arg1 options:(id)arg2;
- (id)initWithOptions:(id)arg1;
- (struct CGSize { float x1; float x2; })inputImageMaximumSize;
- (void)invalidate;
- (void)lock;
- (unsigned long)maximumInputImageSize;
- (unsigned long)maximumOutputImageSize;
- (BOOL)measureRequirementsOf:(id)arg1 query:(int)arg2 :(id*)arg3 results:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg4;
- (id)objectForKey:(id)arg1;
- (struct CGSize { float x1; float x2; })outputImageMaximumSize;
- (void)reclaimResources;
- (void)render:(id)arg1;
- (void)render:(id)arg1 toBitmap:(void*)arg2 rowBytes:(int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 format:(int)arg5 colorSpace:(struct CGColorSpace { }*)arg6;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer { }*)arg2;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer { }*)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toMTLTexture:(id)arg2 commandBuffer:(id)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 target:(unsigned int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCTM:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)unlock;

// CIContext (Internal)

+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_10_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_10_1_2; } x10; struct CGAffineTransform { float x_11_1_1; float x_11_1_2; float x_11_1_3; float x_11_1_4; float x_11_1_5; float x_11_1_6; } x11; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_12_1_1; struct Kernel {} *x_12_1_2; } x12[1024]; unsigned int x13; }*)internalCLContextWithOptions:(id)arg1;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_10_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_10_1_2; } x10; struct CGAffineTransform { float x_11_1_1; float x_11_1_2; float x_11_1_3; float x_11_1_4; float x_11_1_5; float x_11_1_6; } x11; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_12_1_1; struct Kernel {} *x_12_1_2; } x12[1024]; unsigned int x13; }*)internalCLContextWithOptions:(id)arg1 glContext:(void*)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_10_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_10_1_2; } x10; struct CGAffineTransform { float x_11_1_1; float x_11_1_2; float x_11_1_3; float x_11_1_4; float x_11_1_5; float x_11_1_6; } x11; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_12_1_1; struct Kernel {} *x_12_1_2; } x12[1024]; unsigned int x13; }*)internalContextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_10_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_10_1_2; } x10; struct CGAffineTransform { float x_11_1_1; float x_11_1_2; float x_11_1_3; float x_11_1_4; float x_11_1_5; float x_11_1_6; } x11; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_12_1_1; struct Kernel {} *x_12_1_2; } x12[1024]; unsigned int x13; }*)internalContextWithMTLDevice:(id)arg1 options:(id)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_10_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_10_1_2; } x10; struct CGAffineTransform { float x_11_1_1; float x_11_1_2; float x_11_1_3; float x_11_1_4; float x_11_1_5; float x_11_1_6; } x11; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_12_1_1; struct Kernel {} *x_12_1_2; } x12[1024]; unsigned int x13; }*)internalGLContextWithOptions:(id)arg1;

- (void)_gpuContextCheck;
- (id)_initWithInternalRepresentation:(void*)arg1;

@end
